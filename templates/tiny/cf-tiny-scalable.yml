networks: (( merge ))

meta:
  environment: ~
  proxy:
    http_server:     (( merge || nil ))
    https_server:    (( merge || nil ))
    ignored_domains: (( merge || [] ))

  release:
    cf: cf
    haproxy: cf-haproxy

  domain: (( merge ))
  app_domains: (( merge ))

  admin_secret: (( merge ))
  secrets: (( merge ))

  smoke_tests:
    org: (( merge || "smoke-tests" ))
    space: (( merge || "smoke-tests" ))

  ha_proxy: (( merge ))
  floating_static_ips: (( merge ))
  networks:
    z1:
      apps: cf1
    z2:
      apps: cf2

  nfs_server:
    address: (( merge || jobs.data.networks.cf1.static_ips.[0] ))
    allow_from_entries:
      - (( .networks.cf1.subnets.[0].range || nil ))
      - (( .networks.cf2.subnets.[0].range || nil ))

  api_templates: (( merge ))
  backbone_templates: (( merge ))
  data_templates: (( merge ))
  dea_templates: (( merge ))
  ha_proxy_templates: (( merge ))
  health_templates: (( merge ))
  release: (( merge ))
  services_templates: (( merge ))

  api_routes:
    - name: api
      tags:
        component: CloudController
      port: (( .properties.cc.external_port ))
      uris:
        - (( "api." .properties.domain ))
          
  hm9000_routes:
    - name: hm9000
      port: 5155
      tags:
        component: HM9K
      uris:
        - (( "hm9000." .properties.domain ))
    
  uaa_routes:
    - name: uaa
      port: (( .properties.uaa.port ))
      tags:
        component: uaa
      uris:
        - (( "uaa." .properties.domain ))
        - (( "*.uaa." .properties.domain ))
        - (( "login." .properties.domain ))
        - (( "*.login." .properties.domain ))

  loggregator_routes:
    - name: doppler
      port: (( .properties.loggregator.outgoing_dropsonde_port ))
      uris:
        - (( "doppler." .properties.domain ))
    - name: loggregator
      port: (( .properties.traffic_controller.outgoing_port ))
      uris:
        - (( "loggregator." .properties.domain ))
        
  instances:
    backbone_z1:             (( merge || 1 ))
    backbone_z2:             (( merge || 0 ))
    public_haproxy_z1:       (( merge || 1 ))
    private_haproxy_z1:      (( merge || 0 ))
    api_z1:                  (( merge || 1 ))
    api_z2:                  (( merge || 0 ))
    services_z1:             (( merge || 1 ))
    services_z2:             (( merge || 0 ))
    health_z1:               (( merge || 1 ))
    health_z2:               (( merge || 0 ))
    runner_z1:               (( merge || 1 ))
    runner_z2:               (( merge || 0 ))

  job_pools:
    backbone:        (( merge || "large" ))
    data:            (( merge || "large" ))
    public_haproxy:  (( merge || "small" ))
    private_haproxy: (( merge || "small" ))
    api:             (( merge || "medium" ))
    services:        (( merge || "medium" ))
    health:          (( merge || "medium" ))
    runner:          (( merge || "runner" ))

jobs:
  - name: data
    instances: 1
    resource_pool: (( meta.job_pools.data "_z1" ))
    persistent_disk: 102400
    templates: (( meta.data_templates ))
    networks:
      - name: cf1
        static_ips: (( static_ips(4) ))
    properties:
      <<: (( merge ))
      networks: (( meta.networks.z1 ))
      metron_agent:
        zone: z1

  - name: backbone_z1
    instances: (( meta.instances.backbone_z1 ))
    persistent_disk: 102400
    templates: (( meta.backbone_templates ))
    resource_pool: (( meta.job_pools.backbone "_z1" ))
    networks:
      - name: cf1
        static_ips: (( static_ips(5, 6, 7, 8, 9, 10) ))
    properties:
      <<: ((merge ))
      networks: (( meta.networks.z1 ))
      metron_agent:
        zone: z1
      doppler:
        zone: z1
      consul:
        agent:
          mode: server
  - name: backbone_z2
    instances: (( meta.instances.backbone_z2 ))
    persistent_disk: 102400
    templates: (( meta.backbone_templates ))
    resource_pool: (( meta.job_pools.backbone "_z2" ))
    networks:
      - name: cf2
        static_ips: (( static_ips(5, 6, 7, 8, 9, 10) ))
    properties:
      <<: ((merge ))
      networks: (( meta.networks.z2 ))
      metron_agent:
        zone: z2
      doppler:
        zone: z2
      consul:
        agent:
          mode: server

  - name: runner_z1
    templates: (( meta.dea_templates ))
    instances: (( meta.instances.runner_z1 ))
    resource_pool: (( meta.job_pools.runner "_z1" ))
    update:
      max_in_flight: 1
    networks:
      - name: cf1
    properties:
      <<: (( merge ))
      dea_next:
        zone: (( merge || "z1" ))
      networks: (( meta.networks.z1 ))
      metron_agent:
        zone: z1
  - name: runner_z2
    templates: (( meta.dea_templates ))
    instances: (( meta.instances.runner_z2 ))
    resource_pool: (( meta.job_pools.runner "_z2" ))
    update:
      max_in_flight: 1
    networks:
      - name: cf2
    properties:
      <<: (( merge ))
      dea_next:
        zone: (( merge || "z2" ))
      networks: (( meta.networks.z2 ))
      metron_agent:
        zone: z2

  - name: public_haproxy_z1
    instances: (( meta.instances.public_haproxy_z1 ))
    resource_pool: (( meta.job_pools.public_haproxy "_z1" ))
    templates: (( meta.ha_proxy_templates ))
    default_networks:
      - name: floating
        static_ips: (( meta.floating_static_ips ))
      - name: lb1
        default: [dns, gateway]
        static_ips: (( static_ips(0, 11, 12, 13, 14, 15) ))
    networks: (( merge || default_networks ))
    properties:
      <<: (( merge ))
      networks: (( meta.networks.z1 ))
      metron_agent:
        zone: z1
  - name: private_haproxy_z1
    instances: (( meta.instances.private_haproxy_z1 ))
    resource_pool: (( meta.job_pools.private_haproxy "_z1" ))
    templates: (( meta.ha_proxy_templates ))
    networks:
      - name: lb1
        default: [dns, gateway]
        static_ips: (( static_ips(31, 32, 33, 34, 35, 36) ))
    properties:
      <<: (( merge ))
      networks: (( meta.networks.z1 ))
      ha_proxy:
        internal_only_domains: []
      metron_agent:
        zone: z1

  - name: api_z1
    instances: (( meta.instances.api_z1 ))
    resource_pool: (( meta.job_pools.api "_z1" ))
    templates: (( meta.api_templates ))
    update:
      serial: true
    networks:
      - name: cf1
        default: [dns, gateway]
        static_ips: (( static_ips(1, 16, 17, 18, 19, 20) ))
    properties:
      <<: (( merge ))
      route_registrar:
        routes: (( merge || meta.api_routes ))
      consul:
        agent:
          services:
            cloud_controller_ng: {}
            routing-api: {}
      networks: (( meta.networks.z1 ))
      ha_proxy:
        ssl_pem: (( meta.ha_proxy.ssl_pem ))
      metron_agent:
        zone: z1
  - name: api_z2
    instances: (( meta.instances.api_z2 ))
    resource_pool: (( meta.job_pools.api "_z2" ))
    templates: (( meta.api_templates ))
    update:
      serial: true
    networks:
      - name: cf2
        default: [dns, gateway]
        static_ips: (( static_ips(1, 16, 17, 18, 19, 20) ))
    properties:
      <<: (( merge ))
      route_registrar:
        routes: (( merge || meta.api_routes ))
      consul:
        agent:
          services:
            cloud_controller_ng: {}
            routing-api: {}
      networks: (( meta.networks.z2 ))
      ha_proxy:
        ssl_pem: (( meta.ha_proxy.ssl_pem ))
      metron_agent:
        zone: z2

  - name: health_z1
    instances: (( meta.instances.health_z1 ))
    resource_pool: (( meta.job_pools.health "_z1" ))
    templates: (( meta.health_templates ))
    networks:
      - name: cf1
        static_ips: (( static_ips(3, 26, 27, 28, 29, 30) ))
    properties:
      <<: (( merge ))
      route_registrar:
        routes: (( merge || meta.hm9000_routes meta.loggregator_routes ))
      networks: (( meta.networks.z1 ))
      traffic_controller:
        zone: z1
      metron_agent:
        zone: z1
  - name: health_z2
    instances: (( meta.instances.health_z2 ))
    resource_pool: (( meta.job_pools.health "_z2" ))
    templates: (( meta.health_templates ))
    networks:
      - name: cf2
        static_ips: (( static_ips(3, 26, 27, 28, 29, 30) ))
    properties:
      <<: (( merge ))
      route_registrar:
        routes: (( merge || meta.hm9000_routes meta.loggregator_routes ))        
      networks: (( meta.networks.z2 ))
      traffic_controller:
        zone: z2
      metron_agent:
        zone: z2

  - name: services_z1
    instances: (( meta.instances.services_z1 ))
    resource_pool: (( meta.job_pools.services "_z1" ))
    templates: (( meta.services_templates ))
    persistent_disk: 102400
    networks:
      - name: cf1
        static_ips: (( static_ips(2, 21, 22, 23, 24, 25) ))
    properties:
      <<: (( merge ))
      route_registrar:
        routes: (( merge || meta.uaa_routes ))
      networks: (( meta.networks.z1 ))
      router:
        servers: (( .properties.router.servers.z1 .properties.router.servers.z2 ))
      metron_agent:
        zone: z1
  - name: services_z2
    instances: (( meta.instances.services_z2 ))
    resource_pool: (( meta.job_pools.services "_z2" ))
    templates: (( meta.services_templates ))
    persistent_disk: 102400
    networks:
      - name: cf2
        static_ips: (( static_ips(2, 21, 22, 23, 24, 25) ))
    properties:
      <<: (( merge ))
      route_registrar:
        routes: (( merge || meta.uaa_routes ))
      networks: (( meta.networks.z2 ))
      router:
        servers: (( .properties.router.servers.z1 .properties.router.servers.z2 ))
      metron_agent:
        zone: z2

  - name: acceptance_tests_runner
    templates:
    - name: acceptance-tests
      release: cf
    instances: 1
    resource_pool: small_errand
    lifecycle: errand
    networks:
      - name: cf1

  - name: smoke_tests_runner
    templates:
    - name: smoke-tests
      release: cf
    instances: 1
    resource_pool: small_errand
    lifecycle: errand
    networks:
      - name: cf1
    properties:
      networks: (( meta.networks.z1 ))

properties:
  <<: (( merge ))

  template_only:
    aws:
      <<: (( merge ))
      access_key_id: ~
      secret_access_key: ~

  dropsonde:
    enabled: true

  support_address: (( merge || "http://support.cloudfoundry.com" ))
  description: (( merge || "Cloud Foundry sponsored by Pivotal" ))

  ssl:
    skip_cert_verify: (( merge || true ))
  system_domain: (( meta.domain ))
  system_domain_organization: ~
  app_domains: (( [meta.app_domains] ))

  disk_quota_enabled: true

  request_timeout_in_seconds: 900

  ha_proxy:
    <<: (( merge ))
    client_timeout: 120
    server_timeout: 120
    request_timeout: 120
    backend_servers: (( jobs.api_z1.networks.cf1.static_ips jobs.api_z2.networks.cf2.static_ips ))

  ccdb:
    address: (( jobs.data.networks.cf1.static_ips.[0] ))
    databases:
    - tag: cc
      name: ccdb
      citext: true
    db_scheme: postgres
    port: 5524
    roles:
    - name: ccadmin
      password: (( merge ))
      tag: admin

  uaadb:
    address: (( jobs.data.networks.cf1.static_ips.[0] ))
    databases:
    - name: uaadb
      tag: uaa
      citext: true
    db_scheme: postgresql
    port: 5524
    roles:
    - name: uaaadmin
      password: (( merge ))
      tag: admin

  databases:
    db_scheme: postgres
    address: (( jobs.data.networks.cf1.static_ips.[0] ))
    port: 5524
    roles:
      - tag: admin
        name: ccadmin
        password: (( merge ))
      - tag: admin
        name: uaaadmin
        password: (( merge ))

    databases:
      - tag: cc
        name: ccdb
        citext: true
      - tag: uaa
        name: uaadb
        citext: true

  nats:
    user: (( merge ))
    password: (( merge ))
    address: (( jobs.backbone_z1.networks.cf1.static_ips.[0] || jobs.backbone_z2.networks.cf2.static_ips.[0] ))
    port: 4222
    machines: (( jobs.backbone_z1.networks.cf1.static_ips jobs.backbone_z2.networks.cf2.static_ips ))
    debug: false
    trace: false
    monitor_port: 0
    prof_port: 0

  etcd:
    peer_require_ssl: false
    require_ssl: false
    machines: (( jobs.backbone_z1.networks.cf1.static_ips jobs.backbone_z2.networks.cf2.static_ips ))

  etcd_metrics_server:
    nats:
      # until http://git.io/vsUDx is fixed and included in etcd_metrics_server
      # point to canary node since it will be updated first
      machines:
        - (( .properties.nats.machines.[0] ))
      username: (( .properties.nats.user ))
      password: (( .properties.nats.password ))

  dea_next:
    memory_mb: (( merge ))
    memory_overcommit_factor: 3
    disk_mb: (( merge ))
    disk_overcommit_factor: 2
    staging_disk_inode_limit: 200000
    instance_disk_inode_limit: 200000
    deny_networks: (( merge || [] ))
    allow_networks: (( merge || [] ))
    kernel_network_tuning_enabled: true
    directory_server_protocol: https
    evacuation_bail_out_time_in_seconds: 600
    logging_level: debug
    staging_disk_limit_mb: 4096
    staging_memory_limit_mb: 1024
    default_health_check_timeout: 60
    advertise_interval_in_seconds: 5
    heartbeat_interval_in_seconds: 10
    rlimit_core: (( merge || 0 ))

  loggregator_endpoint:
    shared_secret: (( merge ))

  doppler_endpoint:
    shared_secret: (( .properties.loggregator_endpoint.shared_secret ))

  metron_agent:
    deployment: (( meta.environment ))

  metron_endpoint:
    shared_secret: (( .properties.loggregator_endpoint.shared_secret ))

  logger_endpoint: ~

  loggregator:
    maxRetainedLogMessages: 100
    debug: (( merge || false ))
    blacklisted_syslog_ranges: ~
    incoming_port: 3458
    dropsonde_incoming_port: 3459
    outgoing_dropsonde_port: 8081
    etcd:
      machines: (( .properties.etcd.machines ))

  doppler:
    maxRetainedLogMessages: 100
    debug: (( merge || false ))
    blacklisted_syslog_ranges: ~
    incoming_port: 3458
    dropsonde_incoming_port: 3459

  traffic_controller:
    outgoing_port: 8080

  cc: (( merge ))

  hm9000: (( merge ))

  uaa: (( merge ))

  login: (( merge ))

  router:
    servers:
      z1: (( jobs.api_z1.networks.cf1.static_ips ))
      z2: (( jobs.api_z2.networks.cf2.static_ips ))
    requested_route_registration_interval_in_seconds: 20
    status:
      user: (( merge ))
      password: (( merge ))

  syslog_daemon_config: ~

  nfs_server: (( meta.nfs_server ))

  collector: (( merge || nil ))


  smoke_tests:
    <<: (( merge ))
    api: (( "api." meta.domain ))
    apps_domain: (( meta.app_domains ))
    user: admin
    password: (( meta.admin_secret ))
    skip_ssl_validation: true
    org: (( meta.smoke_tests.org ))
    space: (( meta.smoke_tests.space ))
  acceptance_tests:
    <<: (( merge ))
    api: (( "api." meta.domain ))
    apps_domain: (( meta.app_domains ))
    system_domain: (( meta.domain ))
    admin_user: admin
    admin_password: (( meta.admin_secret ))
    oauth_password: (( meta.secrets.uaa_secrets.gorouter ))
    skip_ssl_validation: true
    nodes: 1

  consul:
    <<: (( merge ))
    domain: "consul"
    agent:
      servers:
        lan: (( jobs.backbone_z1.networks.cf1.static_ips jobs.backbone_z2.networks.cf2.static_ips ))
